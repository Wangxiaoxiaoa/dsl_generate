# Generated by Grammarinator 

from math import inf
from src.generate.generater import *

class querylangGenerator(Generator):


    def query(self, parent=None):
        with CFG_UnparserRuleContext(self, 'query', parent) as rule:
            current = rule.current
            self.primary(parent=current)
        return current

    def primary(self, parent=None):
        with CFG_UnparserRuleContext(self, 'primary', parent) as rule:
            current = rule.current
            self.binaryExpression(parent=current)
            with CFG_QuantifierContext(rule, 0, 0, inf, querylangGenerator._quant_sizes[1], 0) as quant0:
                while quant0(rule._name,querylangGenerator._lexicals):
                    with QuantifiedContext(rule):
                        current = rule.current
                        with AlternationContext(rule, 0, querylangGenerator._alt_sizes[0], 0, querylangGenerator._alt_conds[0]) as alt0:
                            current = rule.current
                            choice0 = alt0()
                            if choice0 == 0:
                                self._reserve(7, self.SPACE, parent=current)
                                self._reserve(6, self.T__0, parent=current)
                                self._reserve(5, self.SPACE, parent=current)
                                self.binaryExpression(parent=current)
                            elif choice0 == 1:
                                self._reserve(7, self.SPACE, parent=current)
                                self._reserve(6, self.T__1, parent=current)
                                self._reserve(5, self.SPACE, parent=current)
                                self.binaryExpression(parent=current)
                        current = rule.current
            current = rule.current
        return current

    def binaryExpression(self, parent=None):
        with CFG_UnparserRuleContext(self, 'binaryExpression', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, querylangGenerator._alt_sizes[1], 0, querylangGenerator._alt_conds[0]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    self._reserve(6, self.T__2, parent=current)
                    self._reserve(1, self.primary, parent=current)
                    self.T__3(parent=current)
                elif choice0 == 1:
                    self.searchCondition(parent=current)
            current = rule.current
        return current

    def searchCondition(self, parent=None):
        with CFG_UnparserRuleContext(self, 'searchCondition', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, querylangGenerator._alt_sizes[2], 0, querylangGenerator._alt_conds[1]) as alt0:
                current = rule.current
                [self.dateSearch, self.pathSearch, self.nameSearch, self.sizeSearch, self.typeSearch, self.durationSearch, self.metaSearch, self.quantityCondition, self.contentSearch][alt0()](parent=current)
            current = rule.current
        return current

    def dateSearch(self, parent=None):
        with CFG_UnparserRuleContext(self, 'dateSearch', parent) as rule:
            current = rule.current
            self.binaryDateSearch(parent=current)
            with CFG_QuantifierContext(rule, 0, 0, inf, querylangGenerator._quant_sizes[2], 0) as quant0:
                while quant0(rule._name,querylangGenerator._lexicals):
                    with QuantifiedContext(rule):
                        current = rule.current
                        with AlternationContext(rule, 0, querylangGenerator._alt_sizes[3], 0, querylangGenerator._alt_conds[0]) as alt0:
                            current = rule.current
                            choice0 = alt0()
                            if choice0 == 0:
                                self._reserve(8, self.SPACE, parent=current)
                                self._reserve(7, self.T__0, parent=current)
                                self._reserve(6, self.SPACE, parent=current)
                                self.binaryDateSearch(parent=current)
                            elif choice0 == 1:
                                self._reserve(8, self.SPACE, parent=current)
                                self._reserve(7, self.T__1, parent=current)
                                self._reserve(6, self.SPACE, parent=current)
                                self.binaryDateSearch(parent=current)
                        current = rule.current
            current = rule.current
        return current

    def binaryDateSearch(self, parent=None):
        with CFG_UnparserRuleContext(self, 'binaryDateSearch', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, querylangGenerator._alt_sizes[4], 0, querylangGenerator._alt_conds[0]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    self._reserve(7, self.T__2, parent=current)
                    self._reserve(1, self.dateSearchinfo, parent=current)
                    self.T__3(parent=current)
                elif choice0 == 1:
                    self.dateSearchinfo(parent=current)
            current = rule.current
        return current

    def dateSearchinfo(self, parent=None):
        with CFG_UnparserRuleContext(self, 'dateSearchinfo', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, querylangGenerator._alt_sizes[5], 0, querylangGenerator._alt_conds[0]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    self._reserve(5, self.T__4, parent=current)
                    self._reserve(4, self.SPACE, parent=current)
                    self._reserve(3, self.comparison_type, parent=current)
                    self._reserve(2, self.SPACE, parent=current)
                    self.absolutedate(parent=current)
                elif choice0 == 1:
                    self._reserve(9, self.T__4, parent=current)
                    self._reserve(8, self.SPACE, parent=current)
                    self._reserve(7, self.comparison_type, parent=current)
                    self._reserve(6, self.SPACE, parent=current)
                    self.relativelydate(parent=current)
            current = rule.current
        return current

    def relativelydate(self, parent=None):
        with CFG_UnparserRuleContext(self, 'relativelydate', parent) as rule:
            current = rule.current
            self._reserve(5, self.T__5, parent=current)
            self._reserve(4, self.SPACE, parent=current)
            self._reserve(3, self.T__6, parent=current)
            self._reserve(2, self.SPACE, parent=current)
            self.string(parent=current)
        return current

    def absolutedate(self, parent=None):
        with CFG_UnparserRuleContext(self, 'absolutedate', parent) as rule:
            current = rule.current
            self.STRING(parent=current)
        return current

    def pathSearch(self, parent=None):
        with CFG_UnparserRuleContext(self, 'pathSearch', parent) as rule:
            current = rule.current
            self._reserve(5, self.T__7, parent=current)
            self._reserve(4, self.SPACE, parent=current)
            self._reserve(3, self.is_or_not, parent=current)
            self._reserve(2, self.SPACE, parent=current)
            self.string(parent=current)
        return current

    def nameSearch(self, parent=None):
        with CFG_UnparserRuleContext(self, 'nameSearch', parent) as rule:
            current = rule.current
            self._reserve(5, self.T__8, parent=current)
            self._reserve(4, self.SPACE, parent=current)
            self._reserve(3, self.T__9, parent=current)
            self._reserve(2, self.SPACE, parent=current)
            self.string(parent=current)
        return current

    def sizeSearch(self, parent=None):
        with CFG_UnparserRuleContext(self, 'sizeSearch', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, querylangGenerator._alt_sizes[6], 0, querylangGenerator._alt_conds[0]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    self._reserve(5, self.T__10, parent=current)
                    self._reserve(4, self.SPACE, parent=current)
                    self._reserve(3, self.comparison_type, parent=current)
                    self._reserve(2, self.SPACE, parent=current)
                    self.string(parent=current)
                elif choice0 == 1:
                    self._reserve(7, self.T__10, parent=current)
                    self._reserve(6, self.SPACE, parent=current)
                    self._reserve(5, self.comparison_type, parent=current)
                    self._reserve(4, self.SPACE, parent=current)
                    self._reserve(3, self.T__11, parent=current)
                    self._reserve(2, self.SPACE, parent=current)
                    self.filename(parent=current)
            current = rule.current
        return current

    def typeSearch(self, parent=None):
        with CFG_UnparserRuleContext(self, 'typeSearch', parent) as rule:
            current = rule.current
            self._reserve(5, self.T__12, parent=current)
            self._reserve(4, self.SPACE, parent=current)
            self._reserve(3, self.is_or_not, parent=current)
            self._reserve(2, self.SPACE, parent=current)
            self.string(parent=current)
        return current

    def durationSearch(self, parent=None):
        with CFG_UnparserRuleContext(self, 'durationSearch', parent) as rule:
            current = rule.current
            self._reserve(5, self.T__13, parent=current)
            self._reserve(4, self.SPACE, parent=current)
            self._reserve(3, self.comparison_type, parent=current)
            self._reserve(2, self.SPACE, parent=current)
            self.string(parent=current)
        return current

    def metaSearch(self, parent=None):
        with CFG_UnparserRuleContext(self, 'metaSearch', parent) as rule:
            current = rule.current
            self._reserve(14, self.T__14, parent=current)
            self._reserve(13, self.SPACE, parent=current)
            self._reserve(12, self.T__15, parent=current)
            self._reserve(11, self.SPACE, parent=current)
            self._reserve(9, self.string, parent=current)
            self._reserve(8, self.SPACE, parent=current)
            self._reserve(7, self.T__16, parent=current)
            self._reserve(6, self.SPACE, parent=current)
            self._reserve(5, self.T__17, parent=current)
            self._reserve(4, self.SPACE, parent=current)
            self._reserve(3, self.is_or_not, parent=current)
            self._reserve(2, self.SPACE, parent=current)
            self.string(parent=current)
        return current

    def quantityCondition(self, parent=None):
        with CFG_UnparserRuleContext(self, 'quantityCondition', parent) as rule:
            current = rule.current
            self._reserve(4, self.T__18, parent=current)
            self._reserve(3, self.SPACE, parent=current)
            self._reserve(2, self.T__19, parent=current)
            self._reserve(1, self.SPACE, parent=current)
            self.NUMBER_VALUE(parent=current)
        return current

    def contentSearch(self, parent=None):
        with CFG_UnparserRuleContext(self, 'contentSearch', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, querylangGenerator._alt_sizes[6], 0, querylangGenerator._alt_conds[0]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    self._reserve(5, self.T__20, parent=current)
                    self._reserve(4, self.SPACE, parent=current)
                    self._reserve(3, self.T__9, parent=current)
                    self._reserve(2, self.SPACE, parent=current)
                    self.string(parent=current)
                elif choice0 == 1:
                    self._reserve(7, self.T__20, parent=current)
                    self._reserve(6, self.SPACE, parent=current)
                    self._reserve(5, self.T__21, parent=current)
                    self._reserve(4, self.SPACE, parent=current)
                    self._reserve(3, self.T__22, parent=current)
                    self._reserve(2, self.SPACE, parent=current)
                    self.filename(parent=current)
            current = rule.current
        return current

    def comparison_type(self, parent=None):
        with CFG_UnparserRuleContext(self, 'comparison_type', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, querylangGenerator._alt_sizes[7], 0, querylangGenerator._alt_conds[2]) as alt0:
                current = rule.current
                [self.T__19, self.T__23, self.T__24, self.T__25, self.T__26, self.T__27][alt0()](parent=current)
            current = rule.current
        return current

    def string(self, parent=None):
        with CFG_UnparserRuleContext(self, 'string', parent) as rule:
            current = rule.current
            self.STRING(parent=current)
        return current

    def filename(self, parent=None):
        with CFG_UnparserRuleContext(self, 'filename', parent) as rule:
            current = rule.current
            self.STRING(parent=current)
        return current

    def SPACE(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'SPACE', parent, True) as rule:
            current = rule.current
            current.src += ' '
        return current

    def STRING(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'STRING', parent) as rule:
            current = rule.current
            current.src += '"'
            self.STRING_CONTENT(parent=current)
            current.src += '"'
        return current

    def STRING_CONTENT(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'STRING_CONTENT', parent) as rule:
            current = rule.current
            with CFG_QuantifierContext(rule, 0, 0, inf, querylangGenerator._quant_sizes[0], 0) as quant0:
                while quant0(rule._name,querylangGenerator._lexicals):
                    with QuantifiedContext(rule):
                        current = rule.current
                        value = list(querylangGenerator._lexicals[0].values())[0]
                        if value not in current.src:
                            current.src += value
            current = rule.current
        return current

    def is_or_not(self, parent=None):
        with CFG_UnparserRuleContext(self, 'is_or_not', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, querylangGenerator._alt_sizes[8], 0, querylangGenerator._alt_conds[0]) as alt0:
                current = rule.current
                [self.T__15, self.T__28][alt0()](parent=current)
            current = rule.current
        return current

    def NUMBER_VALUE(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'NUMBER_VALUE', parent) as rule:
            current = rule.current
            with CFG_QuantifierContext(rule, 0, 1, inf, querylangGenerator._quant_sizes[0], 0) as quant0:
                while quant0(rule._name,querylangGenerator._lexicals):
                    with QuantifiedContext(rule):
                        current = rule.current
                        value = list(querylangGenerator._lexicals[1].values())[0]
                        if value not in current.src:
                            current.src += value
            current = rule.current
        return current

    def T__0(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__0', parent, True) as rule:
            current = rule.current
            current.src += 'AND'
        return current

    def T__1(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__1', parent, True) as rule:
            current = rule.current
            current.src += 'OR'
        return current

    def T__2(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__2', parent, True) as rule:
            current = rule.current
            current.src += '('
        return current

    def T__3(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__3', parent, True) as rule:
            current = rule.current
            current.src += ')'
        return current

    def T__4(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__4', parent, True) as rule:
            current = rule.current
            current.src += 'DATE'
        return current

    def T__5(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__5', parent, True) as rule:
            current = rule.current
            current.src += 'CURRENT'
        return current

    def T__6(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__6', parent, True) as rule:
            current = rule.current
            current.src += '-'
        return current

    def T__7(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__7', parent, True) as rule:
            current = rule.current
            current.src += 'PATH'
        return current

    def T__8(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__8', parent, True) as rule:
            current = rule.current
            current.src += 'NAME'
        return current

    def T__9(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__9', parent, True) as rule:
            current = rule.current
            current.src += 'CONTAINS'
        return current

    def T__10(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__10', parent, True) as rule:
            current = rule.current
            current.src += 'SIZE'
        return current

    def T__11(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__11', parent, True) as rule:
            current = rule.current
            current.src += 'FILE_SIZE'
        return current

    def T__12(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__12', parent, True) as rule:
            current = rule.current
            current.src += 'TYPE'
        return current

    def T__13(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__13', parent, True) as rule:
            current = rule.current
            current.src += 'DURATION'
        return current

    def T__14(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__14', parent, True) as rule:
            current = rule.current
            current.src += 'META_TYPE'
        return current

    def T__15(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__15', parent, True) as rule:
            current = rule.current
            current.src += 'IS'
        return current

    def T__16(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__16', parent, True) as rule:
            current = rule.current
            current.src += 'WITH'
        return current

    def T__17(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__17', parent, True) as rule:
            current = rule.current
            current.src += 'META_VALUE'
        return current

    def T__18(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__18', parent, True) as rule:
            current = rule.current
            current.src += 'QUANTITY'
        return current

    def T__19(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__19', parent, True) as rule:
            current = rule.current
            current.src += '='
        return current

    def T__20(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__20', parent, True) as rule:
            current = rule.current
            current.src += 'CONTENT'
        return current

    def T__21(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__21', parent, True) as rule:
            current = rule.current
            current.src += 'EQUALS'
        return current

    def T__22(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__22', parent, True) as rule:
            current = rule.current
            current.src += 'FILE'
        return current

    def T__23(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__23', parent, True) as rule:
            current = rule.current
            current.src += '<'
        return current

    def T__24(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__24', parent, True) as rule:
            current = rule.current
            current.src += '>'
        return current

    def T__25(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__25', parent, True) as rule:
            current = rule.current
            current.src += '!='
        return current

    def T__26(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__26', parent, True) as rule:
            current = rule.current
            current.src += '<='
        return current

    def T__27(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__27', parent, True) as rule:
            current = rule.current
            current.src += '>='
        return current

    def T__28(self, parent=None):
        with CFG_UnlexerRuleContext(self, 'T__28', parent, True) as rule:
            current = rule.current
            current.src += 'IS NOT'
        return current


    _default_rule = query

    _rule_sizes = {
        'query': RuleSize(6, 5),
        'primary': RuleSize(5, 5),
        'binaryExpression': RuleSize(4, 5),
        'searchCondition': RuleSize(3, 5),
        'dateSearch': RuleSize(6, 6),
        'binaryDateSearch': RuleSize(5, 6),
        'dateSearchinfo': RuleSize(4, 6),
        'relativelydate': RuleSize(4, 6),
        'absolutedate': RuleSize(3, 2),
        'pathSearch': RuleSize(4, 6),
        'nameSearch': RuleSize(4, 6),
        'sizeSearch': RuleSize(4, 6),
        'typeSearch': RuleSize(4, 6),
        'durationSearch': RuleSize(4, 6),
        'metaSearch': RuleSize(4, 15),
        'quantityCondition': RuleSize(2, 5),
        'contentSearch': RuleSize(4, 6),
        'comparison_type': RuleSize(2, 1),
        'string': RuleSize(3, 2),
        'filename': RuleSize(3, 2),
        'SPACE': RuleSize(1, 1),
        'STRING': RuleSize(2, 2),
        'STRING_CONTENT': RuleSize(1, 1),
        'is_or_not': RuleSize(2, 1),
        'NUMBER_VALUE': RuleSize(1, 1),
        'T__0': RuleSize(1, 1),
        'T__1': RuleSize(1, 1),
        'T__2': RuleSize(1, 1),
        'T__3': RuleSize(1, 1),
        'T__4': RuleSize(1, 1),
        'T__5': RuleSize(1, 1),
        'T__6': RuleSize(1, 1),
        'T__7': RuleSize(1, 1),
        'T__8': RuleSize(1, 1),
        'T__9': RuleSize(1, 1),
        'T__10': RuleSize(1, 1),
        'T__11': RuleSize(1, 1),
        'T__12': RuleSize(1, 1),
        'T__13': RuleSize(1, 1),
        'T__14': RuleSize(1, 1),
        'T__15': RuleSize(1, 1),
        'T__16': RuleSize(1, 1),
        'T__17': RuleSize(1, 1),
        'T__18': RuleSize(1, 1),
        'T__19': RuleSize(1, 1),
        'T__20': RuleSize(1, 1),
        'T__21': RuleSize(1, 1),
        'T__22': RuleSize(1, 1),
        'T__23': RuleSize(1, 1),
        'T__24': RuleSize(1, 1),
        'T__25': RuleSize(1, 1),
        'T__26': RuleSize(1, 1),
        'T__27': RuleSize(1, 1),
        'T__28': RuleSize(1, 1),
    }

    _alt_sizes = (
        (RuleSize(4, 8), RuleSize(4, 8)),  # 0
        (RuleSize(5, 7), RuleSize(3, 5)),  # 1
        (RuleSize(6, 6), RuleSize(4, 6), RuleSize(4, 6), RuleSize(4, 6), RuleSize(4, 6), RuleSize(4, 6), RuleSize(4, 15), RuleSize(2, 5), RuleSize(4, 6)),  # 2
        (RuleSize(5, 9), RuleSize(5, 9)),  # 3
        (RuleSize(4, 8), RuleSize(4, 6)),  # 4
        (RuleSize(3, 6), RuleSize(4, 10)),  # 5
        (RuleSize(3, 6), RuleSize(3, 8)),  # 6
        (RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1)),  # 7
        (RuleSize(1, 1), RuleSize(1, 1)),  # 8
    )

    _alt_conds = (
        (1, 1),  # 0
        (1, 1, 1, 1, 1, 1, 1, 1, 1),  # 1
        (1, 1, 1, 1, 1, 1),  # 2
    )

    _quant_sizes = (
        RuleSize(0, 0),  # 0
        RuleSize(4, 8),  # 1
        RuleSize(5, 9),  # 2
    )

    _charsets = (
        Generator._charset(((0x20, 0x7f), )),  # 0
        Generator._charset(((0x30, 0x3a), )),  # 1
    )
    
    _lexicals = (
        {'STRING_CONTENT': '<re>.*?</re>'},
        {'NUMBER_VALUE': '<re>[0-9]+</re>'},
    )
